import test from "tape"
import * as chessHelper from "../src/chess-helper.js"

test("chessHelper.coordToFileRank", (t) => {
  t.deepEquals(chessHelper.coordToFileRank(""), undefined, "empty")
  t.deepEquals(chessHelper.coordToFileRank("a1"), [1,1], "a1")
  t.deepEquals(chessHelper.coordToFileRank("b1"), [2,1], "b1")
  t.deepEquals(chessHelper.coordToFileRank("a2"), [1,2], "a2")
  t.deepEquals(chessHelper.coordToFileRank("a8"), [1,8], "a8")
  t.deepEquals(chessHelper.coordToFileRank("h1"), [8,1], "h1")
  t.deepEquals(chessHelper.coordToFileRank("e5"), [5,5], "e5")

  t.end()
})

test("chessHelper.fileRankToCoord", (t) => {
  t.deepEquals(chessHelper.fileRankToCoord(1,1), "a1", "a1")
  t.deepEquals(chessHelper.fileRankToCoord(2,1), "b1", "b1")
  t.deepEquals(chessHelper.fileRankToCoord(1,2), "a2", "a2")
  t.deepEquals(chessHelper.fileRankToCoord(1,8), "a8", "a8")
  t.deepEquals(chessHelper.fileRankToCoord(8,1), "h1", "h1")
  t.deepEquals(chessHelper.fileRankToCoord(5,5), "e5", "e5")

  t.end()
})

test("chessHelper.decodeSAN", (t) => {
  t.deepEquals(chessHelper.decodeSAN(""), undefined, "empty")
  t.deepEquals(chessHelper.decodeSAN("e4"), {pieceSAN:"", capture: false, to: "e4", promotion: "", check: ""}, "e4")
  t.deepEquals(chessHelper.decodeSAN("Nf3"), {pieceSAN:"N", capture: false, to: "f3", promotion: "", check: ""}, "Nf3")
  t.deepEquals(chessHelper.decodeSAN("Re1"), {pieceSAN:"R", capture: false, to: "e1", promotion: "", check: ""}, "Re1")
  t.deepEquals(chessHelper.decodeSAN("cxb5"), {pieceSAN:"c", capture: true, to: "b5", promotion: "", check: ""}, "cxb5")
  t.deepEquals(chessHelper.decodeSAN("Bxe7"), {pieceSAN:"B", capture: true, to: "e7", promotion: "", check: ""}, "Bxe7")
  t.deepEquals(chessHelper.decodeSAN("Rxe1+"), {pieceSAN:"R", capture: true, to: "e1", promotion: "", check: "+"}, "Rxe1+")
  t.deepEquals(chessHelper.decodeSAN("Qxg5"), {pieceSAN:"Q", capture: true, to: "g5", promotion: "", check: ""}, "Qxg5")
  t.deepEquals(chessHelper.decodeSAN("Ra6+"), {pieceSAN:"R", capture: false, to: "a6", promotion: "", check: "+"}, "Ra6+")
  t.deepEquals(chessHelper.decodeSAN("fxe8=Q+"), {pieceSAN:"f", capture: true, to: "e8", promotion: "Q", check: "+"}, "fxe8=Q+")

  t.end()
})

test("chessHelper.isMovePossible", (t) => {
  t.equals(chessHelper.isMovePossible("P", 2, 2, 2, 2), false, "pawn no move")
  t.equals(chessHelper.isMovePossible("k", 2, 2, 2, 2), false, "king no move")
  t.equals(chessHelper.isMovePossible("P", 3, 2, 3, 3), true, "white pawn 1")
  t.equals(chessHelper.isMovePossible("P", 3, 2, 3, 4), true, "white pawn 2, first move")
  t.equals(chessHelper.isMovePossible("P", 3, 3, 3, 5), false, "white pawn 2, not first move")
  t.equals(chessHelper.isMovePossible("P", 3, 2, 3, 5), false, "white pawn 3")
  t.equals(chessHelper.isMovePossible("P", 4, 2, 5, 3), true, "white pawn capture e")
  t.equals(chessHelper.isMovePossible("P", 4, 3, 3, 4), true, "white pawn capture w")
  t.equals(chessHelper.isMovePossible("P", 5, 7, 6, 8), true, "white pawn capture last row")
  t.equals(chessHelper.isMovePossible("P", 5, 2, 5, 1), false, "white pawn backwards")
  t.equals(chessHelper.isMovePossible("P", 5, 2, 1, 1), false, "white pawn teleport")
  t.equals(chessHelper.isMovePossible("p", 3, 7, 3, 6), true, "black pawn 1")
  t.equals(chessHelper.isMovePossible("p", 3, 7, 3, 5), true, "black pawn 2, first move")
  t.equals(chessHelper.isMovePossible("p", 3, 6, 3, 4), false, "black pawn 2, not first move")
  t.equals(chessHelper.isMovePossible("p", 3, 7, 3, 4), false, "black pawn 3")
  t.equals(chessHelper.isMovePossible("p", 4, 7, 5, 6), true, "black pawn capture e")
  t.equals(chessHelper.isMovePossible("p", 4, 7, 3, 6), true, "black pawn capture w")
  t.equals(chessHelper.isMovePossible("p", 5, 2, 6, 1), true, "black pawn capture last row")
  t.equals(chessHelper.isMovePossible("p", 5, 2, 5, 3), false, "black pawn backwards")
  t.equals(chessHelper.isMovePossible("P", 5, 2, 1, 1), false, "black pawn teleport")
  t.equals(chessHelper.isMovePossible("r", 5, 3, 5, 1), true, "rook long s")
  t.equals(chessHelper.isMovePossible("R", 5, 3, 5, 8), true, "rook long n")
  t.equals(chessHelper.isMovePossible("r", 5, 6, 1, 6), true, "rook long w")
  t.equals(chessHelper.isMovePossible("R", 5, 1, 8, 1), true, "rook long e")
  t.equals(chessHelper.isMovePossible("R", 5, 3, 8, 6), false, "rook long ne")
  t.equals(chessHelper.isMovePossible("R", 5, 3, 7, 1), false, "rook long se")
  t.equals(chessHelper.isMovePossible("r", 5, 6, 3, 8), false, "rook long nw")
  t.equals(chessHelper.isMovePossible("r", 5, 6, 2, 3), false, "rook long sw")
  t.equals(chessHelper.isMovePossible("B", 5, 1, 7, 2), false, "rook L")
  t.equals(chessHelper.isMovePossible("b", 5, 3, 8, 6), true, "bishop long ne")
  t.equals(chessHelper.isMovePossible("b", 5, 3, 7, 1), true, "bishop long se")
  t.equals(chessHelper.isMovePossible("B", 5, 6, 3, 8), true, "bishop long nw")
  t.equals(chessHelper.isMovePossible("B", 5, 6, 2, 3), true, "bishop long sw")
  t.equals(chessHelper.isMovePossible("b", 5, 3, 5, 1), false, "bishop long s")
  t.equals(chessHelper.isMovePossible("B", 5, 3, 5, 8), false, "bishop long n")
  t.equals(chessHelper.isMovePossible("b", 5, 6, 1, 6), false, "bishop long w")
  t.equals(chessHelper.isMovePossible("B", 5, 1, 8, 1), false, "bishop long e")
  t.equals(chessHelper.isMovePossible("B", 5, 1, 7, 2), false, "bishop L")
  t.equals(chessHelper.isMovePossible("q", 5, 3, 8, 6), true, "queen long ne")
  t.equals(chessHelper.isMovePossible("q", 5, 3, 7, 1), true, "queen long se")
  t.equals(chessHelper.isMovePossible("q", 5, 6, 3, 8), true, "queen long nw")
  t.equals(chessHelper.isMovePossible("Q", 5, 6, 2, 3), true, "queen long sw")
  t.equals(chessHelper.isMovePossible("Q", 5, 3, 5, 1), true, "queen long s")
  t.equals(chessHelper.isMovePossible("Q", 5, 3, 5, 8), true, "queen long n")
  t.equals(chessHelper.isMovePossible("q", 5, 6, 1, 6), true, "queen long w")
  t.equals(chessHelper.isMovePossible("q", 5, 1, 8, 1), true, "queen long e")
  t.equals(chessHelper.isMovePossible("q", 5, 1, 7, 2), false, "queen L")
  t.equals(chessHelper.isMovePossible("K", 5, 3, 6, 4), true, "king ne")
  t.equals(chessHelper.isMovePossible("k", 5, 3, 6, 2), true, "king se")
  t.equals(chessHelper.isMovePossible("K", 5, 6, 4, 7), true, "king nw")
  t.equals(chessHelper.isMovePossible("k", 5, 6, 4, 5), true, "king sw")
  t.equals(chessHelper.isMovePossible("K", 5, 3, 5, 2), true, "king s")
  t.equals(chessHelper.isMovePossible("k", 5, 3, 5, 4), true, "king n")
  t.equals(chessHelper.isMovePossible("K", 5, 6, 4, 6), true, "king w")
  t.equals(chessHelper.isMovePossible("k", 5, 1, 6, 1), true, "king e")
  t.equals(chessHelper.isMovePossible("K", 5, 3, 8, 6), false, "king long ne")
  t.equals(chessHelper.isMovePossible("k", 5, 3, 7, 1), false, "king long se")
  t.equals(chessHelper.isMovePossible("K", 5, 6, 3, 8), false, "king long nw")
  t.equals(chessHelper.isMovePossible("k", 5, 6, 2, 3), false, "king long sw")
  t.equals(chessHelper.isMovePossible("K", 5, 3, 5, 1), false, "king long s")
  t.equals(chessHelper.isMovePossible("k", 5, 3, 5, 8), false, "king long n")
  t.equals(chessHelper.isMovePossible("K", 5, 6, 1, 6), false, "king long w")
  t.equals(chessHelper.isMovePossible("k", 5, 1, 5, 8), false, "king long e")
  t.equals(chessHelper.isMovePossible("N", 3, 4, 4, 6), true, "knight L ne")
  t.equals(chessHelper.isMovePossible("N", 3, 4, 2, 6), true, "knight L nw")
  t.equals(chessHelper.isMovePossible("n", 3, 4, 5, 5), true, "knight L en")
  t.equals(chessHelper.isMovePossible("n", 3, 4, 5, 3), true, "knight L es")
  t.equals(chessHelper.isMovePossible("n", 3, 4, 4, 2), true, "knight L se")
  t.equals(chessHelper.isMovePossible("n", 3, 4, 2, 2), true, "knight L sw")
  t.equals(chessHelper.isMovePossible("N", 3, 4, 1, 5), true, "knight L wn")
  t.equals(chessHelper.isMovePossible("N", 3, 4, 1, 3), true, "knight L ws")
  t.equals(chessHelper.isMovePossible("n", 5, 3, 8, 6), false, "knight long ne")
  t.equals(chessHelper.isMovePossible("N", 5, 3, 7, 1), false, "knight long se")
  t.equals(chessHelper.isMovePossible("N", 5, 6, 3, 8), false, "knight long nw")
  t.equals(chessHelper.isMovePossible("n", 5, 6, 2, 3), false, "knight long sw")
  t.equals(chessHelper.isMovePossible("n", 5, 3, 5, 1), false, "knight long s")
  t.equals(chessHelper.isMovePossible("n", 5, 3, 5, 8), false, "knight long n")
  t.equals(chessHelper.isMovePossible("n", 5, 6, 1, 6), false, "knight long w")
  t.equals(chessHelper.isMovePossible("N", 5, 1, 8, 1), false, "knight long e")
  t.equals(chessHelper.isMovePossible("N", 5, 1, 6, 2), false, "knight ne")

  t.end()
})